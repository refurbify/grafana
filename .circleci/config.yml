version: 2.1

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master

jobs:
  scan-docker-image:
    description: "Scans a docker image for vulnerabilities using trivy"
    parameters:
      image:
        type: string
      tag:
        type: string
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - restore_cache:
          key: vulnerability-db
      - run:
          name: Install trivy
          command: |
            VERSION=$(
                curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
                grep '"tag_name":' | \
                sed -E 's/.*"v([^"]+)".*/\1/'
            )

            wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin
      - run:
          name: Clear trivy cache
          command: trivy --clear-cache
      - run:
          name: Scan Docker image for unkown/low/medium vulnerabilities
          command: trivy --exit-code 0 --severity UNKNOWN,LOW,MEDIUM << parameters.image >>:<< parameters.tag >>
      - run:
          name: Scan Docker image for high/critical vulnerabilities
          command: trivy --exit-code 1 --severity HIGH,CRITICAL << parameters.image >>:<< parameters.tag >>
      - save_cache:
          key: vulnerability-db
          paths:
            - $HOME/.cache/trivy

  build:
    docker:
      - image: circleci/golang:1.15.5
      - image: circleci/postgres:12.4
        environment:
          POSTGRES_DB: grafanatest
          POSTGRES_USER: grafanatest
          POSTGRES_PASSWORD: grafanatest
    parallelism: 2
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run tests
          environment:
            GRAFANA_TEST_DB: postgres
          command: |
            packages=()
            prefix="$(pwd)"

            for package in $(go list ./...); do
              if [ "$(find "${prefix}${package:26}" -maxdepth 1 -type f -name "*_vrm_test.go" | wc -l | xargs)" != "0" ] ; then
                packages+=("$package")
              fi
            done

            PACKAGE_NAMES=$(echo "${packages[@]}" | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES

workflows:
#  nightly:
#    triggers:
#      - schedule:
#          cron: "0 0 * * *"
#          filters: *filter-only-master
#    jobs:
#      - scan-docker-image:
#          matrix:
#            parameters:
#              image: [ grafana/grafana, grafana/grafana-enterprise ]
#              tag: [ latest, master, latest-ubuntu, master-ubuntu ]
  vrm-test:
    jobs:
      - build
